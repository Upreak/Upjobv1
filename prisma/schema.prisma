// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User Management
enum UserRole {
  SUPER_ADMIN
  ADMIN
  RECRUITER
  JOBSEEKER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?
  name          String?
  phone         String?
  role          UserRole
  status        UserStatus @default(ACTIVE)
  avatar        String?
  workspaceId   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  workspace     Workspace? @relation(fields: [workspaceId], references: [id])
  candidate     Candidate?
  recruiter     Recruiter?
  accounts      Account[]
  sessions      Session[]
  applications  Application[]
  chatMessages  ChatMessage[]
  actionQueue   ActionQueue[]

  @@map("users")
}

// Workspace Management
model Workspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users User[]

  @@map("workspaces")
}

// Authentication (NextAuth.js)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Candidate Profile
model Candidate {
  id              String   @id @default(cuid())
  userId          String   @unique
  resumeUrl       String?
  parsedResume    Json?
  skills          Json?    // Array of skills as JSON
  experience      Json?    // Array of experience objects
  education       Json?    // Array of education objects
  preferences     Json?    // Job preferences
  currentCtc      Float?
  expectedCtc     Float?
  noticePeriod    Int?     // in days
  location        String?
  relocate        Boolean  @default(false)
  summary         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications    Application[]
  savedJobs       SavedJob[]
  chatMessages    ChatMessage[]
  projectCandidates ProjectCandidate[]
  actionQueue     ActionQueue[]

  @@map("candidates")
}

// Recruiter Profile
model Recruiter {
  id          String   @id @default(cuid())
  userId      String   @unique
  company     String?
  department  String?
  designation String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects    Project[]
  chatMessages ChatMessage[]

  @@map("recruiters")
}

// Job/Project Management
enum ProjectStatus {
  DRAFT
  ACTIVE
  HOLD
  CLOSED
  WIN
  PARTIAL_WIN
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE
}

model Project {
  id              String         @id @default(cuid())
  title           String
  company         String
  description     String
  skills          Json?          // Array of skills as JSON
  minExperience   Int            // in years
  maxExperience   Int            // in years
  minSalary       Float?
  maxSalary       Float?
  currency        String?        @default("USD")
  location        Json?          // Array of locations as JSON
  remote          Boolean        @default(false)
  employmentType  EmploymentType @default(FULL_TIME)
  noticePeriod    Int?           // in days
  status          ProjectStatus  @default(DRAFT)
  criteria        Json?          // Star system criteria
  customQuestions Json?          // Array of custom questions
  recruiterId     String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  recruiter       Recruiter           @relation(fields: [recruiterId], references: [id], onDelete: Cascade)
  applications    Application[]
  projectCandidates ProjectCandidate[]
  actionQueue     ActionQueue[]
  savedJobs       SavedJob[]
  chatMessages    ChatMessage[]

  @@map("projects")
}

// Job Applications
enum ApplicationStatus {
  APPLIED
  VIEWED
  SHORTLISTED
  INTERVIEW_SCHEDULED
  OFFERED
  HIRED
  REJECTED
  WITHDRAWN
}

model Application {
  id          String           @id @default(cuid())
  projectId   String
  candidateId String
  userId      String?          // For tracking who created the application
  status      ApplicationStatus @default(APPLIED)
  answers     Json?            // Answers to custom questions
  remarks     String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  user        User?     @relation(fields: [userId], references: [id])

  @@unique([projectId, candidateId])
  @@map("applications")
}

// Project-Candidate Relationship (for shortlisting)
enum CandidateStatus {
  NEW
  CONTACTED
  REPLIED
  SHORTLISTED
  INTERVIEW_SCHEDULED
  OFFERED
  JOINED
  NO_SHOW
  UNDER_FOLLOW_UP
  REJECTED
}

model ProjectCandidate {
  id               String          @id @default(cuid())
  projectId        String
  candidateId      String
  status           CandidateStatus @default(NEW)
  matchScore       Float?
  aiNotes          String?
  recruiterNotes   String?
  nextFollowUp     DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  // Relations
  project          Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  candidate        Candidate       @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@unique([projectId, candidateId])
  @@map("project_candidates")
}

// Saved Jobs
model SavedJob {
  id          String   @id @default(cuid())
  candidateId String
  projectId   String
  createdAt   DateTime @default(now())

  // Relations
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([candidateId, projectId])
  @@map("saved_jobs")
}

// Chat System
enum ChatRole {
  CANDIDATE
  RECRUITER
  BOT
}

enum ChatStatus {
  ACTIVE
  COMPLETED
  INTERVENTION_NEEDED
  DECLINED
}

model ChatMessage {
  id          String     @id @default(cuid())
  projectId   String?
  candidateId String
  recruiterId String?
  userId      String?    // For tracking general user messages
  role        ChatRole
  message     String
  status      ChatStatus?
  metadata    Json?
  createdAt   DateTime   @default(now())

  // Relations
  project     Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  candidate   Candidate   @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  recruiter   Recruiter?  @relation(fields: [recruiterId], references: [id], onDelete: Cascade)
  user        User?       @relation(fields: [userId], references: [id])

  @@map("chat_messages")
}

// Action Queue for Manual Intervention
enum ActionType {
  NEW_MATCHES
  CHAT_FOLLOW_UP
  NO_RESPONSE
  PARSE_FAILURE
  CHAT_INTERVENTION
}

model ActionQueue {
  id          String     @id @default(cuid())
  projectId   String?
  candidateId String?
  type        ActionType
  title       String
  description String?
  status      String     @default("PENDING")
  assignedTo  String     // User ID
  dueDate     DateTime?
  completedAt DateTime?
  metadata    Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  project     Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  candidate   Candidate? @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [assignedTo], references: [id], onDelete: Cascade)

  @@map("action_queue")
}

// Provider Management for AI Services
enum ProviderType {
  LLM
  SERP
  PARSER
  ENRICHMENT
}

model Provider {
  id          String       @id @default(cuid())
  name        String
  type        ProviderType
  endpoint    String
  auth        Json?        // Authentication details
  model       String?
  weight      Int          @default(100)
  dailyLimit  Int?
  costPerCall Float?
  costPerToken Float?
  isActive    Boolean      @default(true)
  settings    Json?        // Additional settings
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  metrics     ProviderMetric[]

  @@map("providers")
}

model ProviderMetric {
  id          String   @id @default(cuid())
  providerId  String
  callCount   Int      @default(0)
  tokenCount  Int      @default(0)
  successRate Float    @default(0)
  avgLatency  Int      @default(0) // in ms
  cost        Float    @default(0)
  date        DateTime @default(now())

  // Relations
  provider    Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@unique([providerId, date])
  @@map("provider_metrics")
}

// Search and Analytics
model SearchLog {
  id          String   @id @default(cuid())
  userId      String?
  query       String
  filters     Json?
  results     Int?
  sources     Json?    // Sources searched
  providers   Json?    // Providers used
  latency     Int?     // in ms
  createdAt   DateTime @default(now())

  @@map("search_logs")
}